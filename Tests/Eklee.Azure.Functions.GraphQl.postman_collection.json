{
	"info": {
		"_postman_id": "2f8f85e7-b8e0-4ea4-9cd6-369b5723b5da",
		"name": "Eklee.Azure.Functions.GraphQl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Publisher",
			"item": [
				{
					"name": "Get Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc70d737-5542-430a-bb01-5f9563bd81c3",
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 1.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"1\");",
									"    pm.expect(jsonData.name).to.eql(\"West House Publishing\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/1",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97ec909-1dd9-4022-b457-4fa34dc5aae6",
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Publisher",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97ec909-1dd9-4022-b457-4fa34dc5aae6",
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher V2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher V2\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/7",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"7"
							]
						}
					},
					"response": []
				},
				{
					"name": "Verify Publisher Update",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c97ec909-1dd9-4022-b457-4fa34dc5aae6",
								"exec": [
									"pm.test(\"Status code is 200.\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Get publisher with Id 7.\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.id).to.eql(\"7\");",
									"    pm.expect(jsonData.name).to.eql(\"FOOBAR Publisher V2\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"id\": \"7\",\n\t\"name\": \"FOOBAR Publisher V2\"\n}"
						},
						"url": {
							"raw": "{{endpoint}}/api/publishers/7",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"publishers",
								"7"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "SeedDatabase",
			"item": [
				{
					"name": "Seed Books",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c54615-a264-46b5-8bc5-b77d09317f9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 30 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBook.length).to.eql(30);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBook(book: [{id: \\\"1\\\", name: \\\"Nancy in the Wonderland\\\", category: \\\"Children\\\"}, {id: \\\"2\\\", name: \\\"App in the Cloud\\\", category: \\\"Technology\\\"}, {id: \\\"3\\\", name: \\\"History of China\\\", category: \\\"History\\\"}, {id: \\\"4\\\", name: \\\"C/C++ for Beginners\\\", category: \\\"Technology\\\"}, {id: \\\"5\\\", name: \\\"How To Draw Anything\\\", category: \\\"Art\\\"}, {id: \\\"6\\\", name: \\\"Anatomy and Drawing\\\", category: \\\"Art\\\"}, {id: \\\"7\\\", name: \\\"Space Drawings\\\", category: \\\"Art\\\"}, {id: \\\"8\\\", name: \\\"Art for Beginners\\\", category: \\\"Art\\\"}, {id: \\\"9\\\", name: \\\"Chinese Art\\\", category: \\\"Art\\\"}, {id: \\\"10\\\", name: \\\"Art in 2018\\\", category: \\\"Art\\\"}, {id: \\\"11\\\", name: \\\"Makers of design\\\", category: \\\"Art\\\"}, {id: \\\"12\\\", name: \\\"Art Forms in Nature\\\", category: \\\"Art\\\"}, {id: \\\"13\\\", name: \\\"The Art of Instruction\\\", category: \\\"Art\\\"}, {id: \\\"14\\\", name: \\\"The Contemporary Art Book\\\", category: \\\"Art\\\"}, {id: \\\"15\\\", name: \\\"Sketchbook Fairy Tale\\\", category: \\\"Art\\\"}, {id: \\\"16\\\", name: \\\"Art History\\\", category: \\\"Art\\\"}, {id: \\\"17\\\", name: \\\"Roman Art\\\", category: \\\"Art\\\"}, {id: \\\"18\\\", name: \\\"The Metropolitan Museum of Art\\\", category: \\\"Art\\\"}, {id: \\\"19\\\", name: \\\"Texas Artworks\\\", category: \\\"Art\\\"}, {id: \\\"20\\\", name: \\\"Simple arts\\\", category: \\\"Art\\\"}, {id: \\\"21\\\", name: \\\"Art for kids\\\", category: \\\"Art\\\"}, {id: \\\"22\\\", name: \\\"Advanced art for kids\\\", category: \\\"Art\\\"}, {id: \\\"23\\\", name: \\\"Art and music\\\", category: \\\"Art\\\"}, {id: \\\"24\\\", name: \\\"Art Apps\\\", category: \\\"Art\\\"}, {id: \\\"25\\\", name: \\\"Art in homes\\\", category: \\\"Art\\\"}, {id: \\\"26\\\", name: \\\"Art ABC\\\", category: \\\"Art\\\"}, {id: \\\"27\\\", name: \\\"Touching Art\\\", category: \\\"Art\\\"}, {id: \\\"28\\\", name: \\\"Woodwork Art\\\", category: \\\"Art\\\"}, {id: \\\"29\\\", name: \\\"Plastics Art work\\\", category: \\\"Art\\\"}, {id: \\\"30\\\", name: \\\"Boring Art\\\", category: \\\"Art\\\"}]) {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Authors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c54615-a264-46b5-8bc5-b77d09317f9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 12 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateAuthor.length).to.eql(12);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateAuthor(author: [{id: \\\"1\\\", name: \\\"James Wood\\\"}, {id: \\\"2\\\", name: \\\"Andy Liu\\\"}, {id: \\\"3\\\", name: \\\"Derick North\\\"}, {id: \\\"4\\\", name: \\\"Mary Jane\\\"}, {id: \\\"5\\\", name: \\\"Sir Richard Ice\\\"}, {id: \\\"6\\\", name: \\\"Ken Poh\\\"}, {id: \\\"7\\\", name: \\\"Zac Mer\\\"}, {id: \\\"8\\\", name: \\\"Kathy Zhang\\\"}, {id: \\\"9\\\", name: \\\"Joe Cook\\\"}, {id: \\\"10\\\", name: \\\"Michael Han\\\"}, {id: \\\"11\\\", name: \\\"Fu Wen\\\"}, {id: \\\"12\\\", name: \\\"Li Wei\\\"}]) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed BookAuthors",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c54615-a264-46b5-8bc5-b77d09317f9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 7 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateBookAuthors.length).to.eql(7);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateBookAuthors(bookauthors: [{id: \\\"1\\\", bookId: \\\"1\\\", authorIdList: [\\\"1\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"2\\\", bookId: \\\"2\\\", authorIdList: [\\\"2\\\", \\\"3\\\", \\\"4\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"3\\\", bookId: \\\"3\\\", authorIdList: [\\\"3\\\", \\\"5\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"4\\\", bookId: \\\"4\\\", authorIdList: [\\\"2\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"5\\\", bookId: \\\"5\\\", authorIdList: [\\\"7\\\"], royaltyType: \\\"b1\\\"}, {id: \\\"6\\\", bookId: \\\"6\\\", authorIdList: [\\\"8\\\"], royaltyType: \\\"c1\\\"}, {id: \\\"7\\\", bookId: \\\"7\\\", authorIdList: [\\\"9\\\"], royaltyType: \\\"c1\\\"}]) {\\n    id\\n    bookId\\n    authorIdList\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Publishers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c54615-a264-46b5-8bc5-b77d09317f9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 5 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreatePublisher.length).to.eql(5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreatePublisher(publisher: [{id: \\\"8\\\", name: \\\"King Publishing House\\\"}, {id: \\\"9\\\", name: \\\"Queen Publishing House\\\"}, {id: \\\"10\\\", name: \\\"John Publishing House\\\"}, {id: \\\"11\\\", name: \\\"Mark Publishing House\\\"}, {id: \\\"12\\\", name: \\\"Bao Publisher\\\"}]) {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "Seed Reviewers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "90c54615-a264-46b5-8bc5-b77d09317f9b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Created data contains 10 items\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.batchCreateReviewer.length).to.eql(10);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  batchCreateReviewer(reviewer: [{id: \\\"1\\\", name: \\\"James A\\\", interests: [\\\"Technology\\\", \\\"Arts\\\"], region: \\\"Dallas/Fort Worth\\\"}, {id: \\\"2\\\", name: \\\"Mec James\\\", interests: [\\\"Technology\\\"], region: \\\"Austin\\\"}, {id: \\\"3\\\", name: \\\"Hal Bet\\\", interests: [\\\"Children\\\"], region: \\\"Houston\\\"}, {id: \\\"4\\\", name: \\\"Mary P\\\", interests: [\\\"Technology\\\"], region: \\\"Dallas/Fort Worth\\\"}, {id: \\\"5\\\", name: \\\"Rick James\\\", interests: [\\\"History\\\"], region: \\\"Seattle\\\"}, {id: \\\"6\\\", name: \\\"David Kim\\\", interests: [\\\"Technology\\\", \\\"Arts\\\"], region: \\\"St Paul/Minneapolis\\\"}, {id: \\\"7\\\", name: \\\"Phil Hack\\\", interests: [\\\"Arts\\\"], region: \\\"Baltimore\\\"}, {id: \\\"8\\\", name: \\\"Becky Far\\\", interests: [\\\"Politics\\\", \\\"Arts\\\"], region: \\\"San Fransico\\\"}, {id: \\\"9\\\", name: \\\"Kate Lim\\\", interests: [\\\"Technology\\\"], region: \\\"LA\\\"}, {id: \\\"10\\\", name: \\\"Mary Ann\\\", interests: [\\\"Children\\\"], region: \\\"Washington DC\\\"}]) {\\n    id\\n    name\\n    interests\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Queries",
			"item": [
				{
					"name": "BookQueryById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(\"1\");",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"Nancy in the Wonderland\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: \\\"1\\\") {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BooksQueryByCategory",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBooksByCategory[0].id).to.eql(\"2\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].name).to.eql(\"App in the Cloud\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].category).to.eql(\"Technology\");",
									"    ",
									"    pm.expect(jsonData.data.getBooksByCategory[1].id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].name).to.eql(\"C/C++ for Beginners\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].category).to.eql(\"Technology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBooksByCategory(category: \\\"Technology\\\") {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "BooksQueryById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBooksByCategory[0].id).to.eql(\"2\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].name).to.eql(\"App in the Cloud\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].category).to.eql(\"Technology\");",
									"    ",
									"    pm.expect(jsonData.data.getBooksByCategory[1].id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].name).to.eql(\"C/C++ for Beginners\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].category).to.eql(\"Technology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBooksByCategory(category: \\\"Technology\\\") {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "getPublisherById",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8cdd0da6-f4bd-427b-ba71-cde39b62de87",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getPublisherById.id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getPublisherById.name).to.eql(\"ACME\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getPublisherById(id: \\\"4\\\") {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mutations",
			"item": [
				{
					"name": "CreateBookWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3f3e5f-0cae-44b0-82d6-ed1e8503875e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\").toString(); ",
									"",
									"pm.test(\"Created data contains Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.createBook.id).to.eql(id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d61d284-ccef-46b5-92d5-8867d081b060",
								"exec": [
									"var milliseconds = (new Date()).getTime().toString();",
									"pm.environment.set(\"newId1\", milliseconds);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  createBook(book: {id: \\\"{{newId1}}\\\", name: \\\"abc\\\", category: \\\"aaa\\\"}) {\\n    id\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResolveBookQueryWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\"); ",
									"    ",
									"pm.test(\"Query returns with match with Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(id);",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"abc\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: \\\"{{newId1}}\\\") {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "CreateBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3f3e5f-0cae-44b0-82d6-ed1e8503875e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book review is created.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.createBookReview.id).to.eql(\"1\");",
									"    pm.expect(jsonData.data.createBookReview.bookId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.createBookReview.reviewerId).to.eql(\"1\");",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d61d284-ccef-46b5-92d5-8867d081b060",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  createBookReview(bookreview: {id: \\\"1\\\", bookId: \\\"1\\\", reviewerId: \\\"1\\\", comments: \\\"It was good\\\", stars: 5}) {\\n    id\\n    bookId\\n    reviewerId\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "UpdateBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3f3e5f-0cae-44b0-82d6-ed1e8503875e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\").toString(); ",
									"",
									"pm.test(\"Bookreview is updated.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.updateBookReview.id).to.eql(\"1\");",
									"    pm.expect(jsonData.data.updateBookReview.bookId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.updateBookReview.reviewerId).to.eql(\"1\");",
									"    pm.expect(jsonData.data.updateBookReview.comments).to.eql(\"It was good ish I think\");",
									"    pm.expect(jsonData.data.updateBookReview.stars).to.eql(1);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d61d284-ccef-46b5-92d5-8867d081b060",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  updateBookReview(bookreview: {id: \\\"1\\\", bookId: \\\"1\\\", reviewerId: \\\"1\\\", comments: \\\"It was good ish I think\\\", stars: 1}) {\\n    id\\n    bookId\\n    reviewerId\\n    comments\\n    stars\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "DeleteBookReview",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3f3e5f-0cae-44b0-82d6-ed1e8503875e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Book review is deleted.\", function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.deleteBookReview.message).not.equal(null);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d61d284-ccef-46b5-92d5-8867d081b060",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteBookReview(bookreview: {id: \\\"1\\\", bookId: \\\"1\\\"}) {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Paging",
			"item": [
				{
					"name": "GetFirstPageForBooksWithCategoryArt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.environment.set(\"nextPageCursor\", dto.pageInfo.startCursor);",
									"    pm.environment.set(\"secondPageCursor\", dto.pageInfo.endCursor);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetFirstPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after: \\\"{{nextPageCursor}}\\\" ) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecondPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"",
									"    pm.environment.set(\"thirdPageCursor\", dto.pageInfo.endCursor);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after:\\\"{{secondPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLastPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after:\\\"{{thirdPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Cleanup",
			"item": [
				{
					"name": "CleanupReviewers",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dca96fc-11b4-4254-9244-74661e5ab199",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  deleteAllReviewer {\\n    message\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}