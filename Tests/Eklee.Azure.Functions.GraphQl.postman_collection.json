{
	"info": {
		"_postman_id": "2f8f85e7-b8e0-4ea4-9cd6-369b5723b5da",
		"name": "Eklee.Azure.Functions.GraphQl",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Queries",
			"item": [
				{
					"name": "ResolveBookQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(\"1\");",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"Nancy in the Wonderland\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: \\\"1\\\") {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResolveBooksQuery",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Query returns with match\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBooksByCategory[0].id).to.eql(\"2\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].name).to.eql(\"App in the Cloud\");",
									"    pm.expect(jsonData.data.getBooksByCategory[0].category).to.eql(\"Technology\");",
									"    ",
									"    pm.expect(jsonData.data.getBooksByCategory[1].id).to.eql(\"4\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].name).to.eql(\"C/C++ for Beginners\");",
									"    pm.expect(jsonData.data.getBooksByCategory[1].category).to.eql(\"Technology\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBooksByCategory(category: \\\"Technology\\\") {\\n    id\\n    name\\n    category\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Mutations",
			"item": [
				{
					"name": "CreateBookWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c3f3e5f-0cae-44b0-82d6-ed1e8503875e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\").toString(); ",
									"",
									"pm.test(\"Created data contains Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    ",
									"    pm.expect(jsonData.data.createBook.id).to.eql(id);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "5d61d284-ccef-46b5-92d5-8867d081b060",
								"exec": [
									"var milliseconds = (new Date()).getTime().toString();",
									"pm.environment.set(\"newId1\", milliseconds);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"mutation {\\n  createBook(book: {id: \\\"{{newId1}}\\\", name: \\\"abc\\\", category: \\\"aaa\\\"}) {\\n    id\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "ResolveBookQueryWithId",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4d1b51c-a22b-441a-a84a-4e6f5cd64085",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var id = pm.environment.get(\"newId1\"); ",
									"    ",
									"pm.test(\"Query returns with match with Id \" + id, function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.data.getBook.id).to.eql(id);",
									"    pm.expect(jsonData.data.getBook.name).to.eql(\"abc\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"operationName\":null,\"variables\":{},\"query\":\"{\\n  getBook(id: \\\"{{newId1}}\\\") {\\n    id\\n    name\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Paging",
			"item": [
				{
					"name": "GetFirstPageForBooksWithCategoryArt",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"5\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.environment.set(\"nextPageCursor\", dto.pageInfo.startCursor);",
									"    pm.environment.set(\"secondPageCursor\", dto.pageInfo.endCursor);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetFirstPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"6\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after: \\\"{{nextPageCursor}}\\\" ) {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetSecondPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 10\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(10);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"15\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"24\");",
									"});",
									"",
									"",
									"pm.test(\"Set next test from same sport.\", function () {",
									"    var dto = getPayLoad();",
									"",
									"    pm.environment.set(\"thirdPageCursor\", dto.pageInfo.endCursor);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after:\\\"{{secondPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetLastPageForBooksWithCategoryArtWithCursor",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d107c500-8644-4ea6-95f7-1ae256145461",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"function getPayLoad() {",
									"    var jsonData = pm.response.json();",
									"    var dto = jsonData.data.getPagedBooksByCategory;",
									"    return dto;",
									"}",
									"",
									"pm.test(\"Total count is returned and valid.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.totalCount).to.eql(26);",
									"});",
									"",
									"pm.test(\"Edges return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.edges.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Items return is defaulted to 6\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.items.length).to.eql(6);",
									"});",
									"",
									"pm.test(\"Previous page flag is true.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasPreviousPage).to.eql(true);",
									"});",
									"",
									"pm.test(\"Next page flag is false.\", function () {",
									"    var dto = getPayLoad();",
									"    pm.expect(dto.pageInfo.hasNextPage).to.eql(false);",
									"});",
									"",
									"pm.test(\"Verify first item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.items[0];",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify first edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var first = dto.edges[0].node;",
									"    pm.expect(first.id).to.eql(\"25\");",
									"});",
									"",
									"pm.test(\"Verify last item fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.items[dto.items.length-1];",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});",
									"",
									"pm.test(\"Verify last edge fetched has expected id.\", function () {",
									"    var dto = getPayLoad();",
									"    var last = dto.edges[dto.edges.length-1].node;",
									"    pm.expect(last.id).to.eql(\"30\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"operationName\":null,\n\t\"variables\":{},\n\t\"query\":\"{\\n  getPagedBooksByCategory(category: \\\"Art\\\", after:\\\"{{thirdPageCursor}}\\\") {\\n    totalCount\\n    edges {\\n      cursor\\n      node {\\n        id\\n        name\\n        category\\n      }\\n    }\\n    items {\\n      id\\n      name\\n      category\\n    }\\n    pageInfo {\\n      startCursor\\n      endCursor\\n      hasNextPage\\n      hasPreviousPage\\n    }\\n  }\\n}\\n\"}"
						},
						"url": {
							"raw": "{{endpoint}}/api/books/graph",
							"host": [
								"{{endpoint}}"
							],
							"path": [
								"api",
								"books",
								"graph"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}